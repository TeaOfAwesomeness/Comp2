#Details
##Title
COMP5400 Coursework 2
##Date
April 2022
##Author
Thomas A.T. Priest
##Git repository
https://github.com/TeaOfAwesomeness/Comp2

#Description
This project was created to showcase a Kohonen map.
There is a GUI to allow for a variable size in number of neurons and specify new training or testing data.

#Dependencies
There is included a resources file, which contains auto-generated descriptions of required libraries.
However, just in case it doesn't work all imported libraries are listed below:
numpy, random, math, tkinter, csv, copy

#Instructions
First, enter a real integer for the number of input and output nodes, then press the 'generate' button. Note, the number
    of output nodes should result in an integer number when square rooted (thus an n by n network).
Second, enter the path to your training data.
    The path should include the file name exactly as it appears.
    The file should be a text file written in csv format using commas between variables and lines between each set.
    Each set should have the first variable be the name of the set with no spaces, followed by real numbers for inputs.
    Note: if the program struggles to accept the file path, use the 'training_data' file with that exact string as input.
    Press the in line button.
Third: the network has now been trained. Enter the file path to your test data in the 'test' textbox.
    The same rules apply as above, but only one line of data should be present.
    Press the in line button.
Fourth: The GUI should now show an array of buttons demonstrating output nodes.
    BMUs will have the name of the dataset/s they match to in their text field.
To reset, you can re-train with new data for the same size of network or re-generate and re-train for a new size.

This program was developed and tested in the PyCharm IDE, not tested on linux. It should work, but if not, then it will
work on PyCharm with all the required dependencies installed.

#State
The network and GUI work. Future work would be to add a k-means algorithm for colour coding the resulting potential
field in the network.

#Notes
I tested this system using the data in the associated text files, using an input size of 3, output size of 64 and
learning rates of both 1 and 0.5.
The system has some basic validation written in - such as checking a value exists - but will break under any amount of
stress testing.
I had hoped to get a colour-classification scheme going but being still pretty new to advanced python just debugging the
arrays (which are now mostly lists) took most of my time.

#References
All the work here is my own. I use equations 1, 2, 4, 5 and 6 described in the following example because they seemed
sensible and I assume are standard for SOMs:
http://www.ai-junkie.com/ann/som/som2.html
Note none of the code is used, just the equations.